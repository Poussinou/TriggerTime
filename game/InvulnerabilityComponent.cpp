/*
 * Copyright (c) 2014, Stanislav Vorobiov
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include "InvulnerabilityComponent.h"
#include "SceneObject.h"
#include "SingleTweening.h"
#include <boost/make_shared.hpp>

namespace af
{
    InvulnerabilityComponent::InvulnerabilityComponent(float duration)
    : PhasedComponent(phaseThink),
      duration_(duration),
      tweenTime_(0.0f)
    {
    }

    InvulnerabilityComponent::InvulnerabilityComponent(const RenderComponentPtr& rc,
        const AnimationComponentPtr& ac,
        float duration)
    : PhasedComponent(phaseThink),
      rc_(rc),
      ac_(ac),
      duration_(duration),
      tweenTime_(0.0f)
    {
    }

    InvulnerabilityComponent::~InvulnerabilityComponent()
    {
    }

    void InvulnerabilityComponent::accept(ComponentVisitor& visitor)
    {
        visitor.visitPhasedComponent(shared_from_this());
    }

    void InvulnerabilityComponent::update(float dt)
    {
        if (duration_ < 0.0f) {
            return;
        }

        duration_ -= dt;

        if (duration_ > 0.0f) {
            return;
        }

        duration_ = 0.0f;

        if (!rc_) {
            removeFromParent();
            return;
        }

        if (!tweening_) {
            tweening_ = boost::make_shared<SingleTweening>(1.0f,
                EaseOutQuad, rc_->color().rgba[3], 0.0f);
            tweenTime_ = 0.0f;
            return;
        }

        tweenTime_ += dt;

        float value = tweening_->getValue(tweenTime_);

        Color c = rc_->color();

        c.rgba[3] = value;

        rc_->setColor(c);

        if (tweening_->finished(tweenTime_)) {
            removeFromParent();
        }
    }

    void InvulnerabilityComponent::onRegister()
    {
        if (rc_) {
            parent()->addComponent(rc_);
            parent()->addComponent(ac_);
        }
        parent()->setInvulnerable(true);
    }

    void InvulnerabilityComponent::onUnregister()
    {
        parent()->setInvulnerable(false);
        if (rc_) {
            rc_->removeFromParent();
            ac_->removeFromParent();
        }
    }
}
